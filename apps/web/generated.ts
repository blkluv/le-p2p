// Generated by @wagmi/cli@1.3.0 on 7/23/2023 at 12:59:38 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  Address,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICircuitValidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCircuitValidatorABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getChallengeInputIndex',
    outputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getCircuitId',
    outputs: [{ name: 'id', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'inputs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
      { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
      { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
      { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'verify',
    outputs: [{ name: 'r', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWorldId
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iWorldIdABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'root', internalType: 'uint256', type: 'uint256' },
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'signalHash', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      {
        name: 'externalNullifierHash',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IZKPVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const izkpVerifierABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'requestId', internalType: 'uint64', type: 'uint64' }],
    name: 'getZKPRequest',
    outputs: [
      {
        name: '',
        internalType: 'struct ICircuitValidator.CircuitQuery',
        type: 'tuple',
        components: [
          { name: 'schema', internalType: 'uint256', type: 'uint256' },
          { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
          { name: 'operator', internalType: 'uint256', type: 'uint256' },
          { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
          { name: 'circuitId', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      {
        name: 'validator',
        internalType: 'contract ICircuitValidator',
        type: 'address',
      },
      { name: 'schema', internalType: 'uint256', type: 'uint256' },
      { name: 'slotIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'operator', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setZKPRequest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      {
        name: 'validator',
        internalType: 'contract ICircuitValidator',
        type: 'address',
      },
      { name: 'schema', internalType: 'uint256', type: 'uint256' },
      { name: 'slotIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'operator', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setZKPRequestRaw',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      { name: 'inputs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
      { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
      { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
    ],
    name: 'submitZKPResponse',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LeP2PEscrow
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export const leP2PEscrowABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'worldId_', internalType: 'contract IWorldId', type: 'address' },
      { name: 'appId', internalType: 'string', type: 'string' },
      { name: 'actionId', internalType: 'string', type: 'string' },
      { name: 'token_', internalType: 'contract IERC20', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AlreadyRegisteredNullifier' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'paymentProof',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'OrderCompleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'seller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fiatToTokenExchangeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'iban', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'OrderCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'paymentProof',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'OrderPayed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'OrderReleased',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderReserved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ARBITRATOR_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'KYC_REQUEST_ID',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_AMOUNT_NON_VERIFIED',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'arbitrateCompleteOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'cancelOrderArbitrator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'cancelOrderSeller',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'confirmOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fiatToTokenExchangeRate',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'iban', internalType: 'string', type: 'string' },
    ],
    name: 'createOrder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSupportedRequests',
    outputs: [{ name: 'arr', internalType: 'uint64[]', type: 'uint64[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'requestId', internalType: 'uint64', type: 'uint64' }],
    name: 'getZKPRequest',
    outputs: [
      {
        name: '',
        internalType: 'struct ICircuitValidator.CircuitQuery',
        type: 'tuple',
        components: [
          { name: 'schema', internalType: 'uint256', type: 'uint256' },
          { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
          { name: 'operator', internalType: 'uint256', type: 'uint256' },
          { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
          { name: 'circuitId', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isKycVerified',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isVerifiedHuman',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextOrderId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'orders',
    outputs: [
      { name: 'seller', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fiatToTokenExchangeRate',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'iban', internalType: 'string', type: 'string' },
      { name: 'buyer', internalType: 'address', type: 'address' },
      { name: 'paymentProof', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proofs',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'releaseOrderArbitrator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'releaseOrderBuyer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    name: 'requestQueries',
    outputs: [
      { name: 'schema', internalType: 'uint256', type: 'uint256' },
      { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
      { name: 'operator', internalType: 'uint256', type: 'uint256' },
      { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
      { name: 'circuitId', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    name: 'requestValidators',
    outputs: [
      { name: '', internalType: 'contract ICircuitValidator', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'reserveOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      {
        name: 'validator',
        internalType: 'contract ICircuitValidator',
        type: 'address',
      },
      { name: 'schema', internalType: 'uint256', type: 'uint256' },
      { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
      { name: 'operator', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setZKPRequest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      {
        name: 'validator',
        internalType: 'contract ICircuitValidator',
        type: 'address',
      },
      { name: 'schema', internalType: 'uint256', type: 'uint256' },
      { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
      { name: 'operator', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setZKPRequestRaw',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'ipfsHash', internalType: 'string', type: 'string' },
    ],
    name: 'submitPayment',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      { name: 'inputs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
      { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
      { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
    ],
    name: 'submitZKPResponse',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'userVolume',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signal', internalType: 'address', type: 'address' },
      { name: 'root', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyAndRegister',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export const leP2PEscrowAddress = {
  80001: '0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631',
} as const

/**
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export const leP2PEscrowConfig = {
  address: leP2PEscrowAddress,
  abi: leP2PEscrowABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockWorldId
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockWorldIdABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'root', internalType: 'uint256', type: 'uint256' },
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'signalHash', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      {
        name: 'externalNullifierHash',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Poseidon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_poseidon2ContractAddr',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_poseidon3ContractAddr',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'inp', internalType: 'uint256[2]', type: 'uint256[2]' }],
    name: 'hash2',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'inp', internalType: 'uint256[3]', type: 'uint256[3]' }],
    name: 'hash3',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonUnit1L
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonUnit1LABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[1]', type: 'uint256[1]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonUnit2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonUnit2ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[2]', type: 'uint256[2]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonUnit2L
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonUnit2LABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[2]', type: 'uint256[2]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonUnit3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonUnit3ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[3]', type: 'uint256[3]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonUnit3L
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonUnit3LABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[3]', type: 'uint256[3]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonUnit4L
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonUnit4LABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[4]', type: 'uint256[4]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonUnit5L
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonUnit5LABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[5]', type: 'uint256[5]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonUnit6L
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonUnit6LABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[6]', type: 'uint256[6]' }],
    name: 'poseidon',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SpongePoseidon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const spongePoseidonABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'values', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'hash',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// USDCMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export const usdcMockABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

/**
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export const usdcMockAddress = {
  80001: '0xB6070545E83827182446F0B00405f04456e594ca',
} as const

/**
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export const usdcMockConfig = {
  address: usdcMockAddress,
  abi: usdcMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ZKPVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const zkpVerifierABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSupportedRequests',
    outputs: [{ name: 'arr', internalType: 'uint64[]', type: 'uint64[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'requestId', internalType: 'uint64', type: 'uint64' }],
    name: 'getZKPRequest',
    outputs: [
      {
        name: '',
        internalType: 'struct ICircuitValidator.CircuitQuery',
        type: 'tuple',
        components: [
          { name: 'schema', internalType: 'uint256', type: 'uint256' },
          { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
          { name: 'operator', internalType: 'uint256', type: 'uint256' },
          { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
          { name: 'circuitId', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'proofs',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    name: 'requestQueries',
    outputs: [
      { name: 'schema', internalType: 'uint256', type: 'uint256' },
      { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
      { name: 'operator', internalType: 'uint256', type: 'uint256' },
      { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
      { name: 'circuitId', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    name: 'requestValidators',
    outputs: [
      { name: '', internalType: 'contract ICircuitValidator', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      {
        name: 'validator',
        internalType: 'contract ICircuitValidator',
        type: 'address',
      },
      { name: 'schema', internalType: 'uint256', type: 'uint256' },
      { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
      { name: 'operator', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setZKPRequest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      {
        name: 'validator',
        internalType: 'contract ICircuitValidator',
        type: 'address',
      },
      { name: 'schema', internalType: 'uint256', type: 'uint256' },
      { name: 'claimPathKey', internalType: 'uint256', type: 'uint256' },
      { name: 'operator', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'queryHash', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setZKPRequestRaw',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestId', internalType: 'uint64', type: 'uint64' },
      { name: 'inputs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'a', internalType: 'uint256[2]', type: 'uint256[2]' },
      { name: 'b', internalType: 'uint256[2][2]', type: 'uint256[2][2]' },
      { name: 'c', internalType: 'uint256[2]', type: 'uint256[2]' },
    ],
    name: 'submitZKPResponse',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof accessControlABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, TFunctionName, TMode>({
    abi: accessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof accessControlABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, 'grantRole', TMode>({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof accessControlABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, 'renounceRole', TMode>({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof accessControlABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, 'revokeRole', TMode>({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'decreaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof erc20ABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'increaseAllowance', TMode>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAccessControlABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, TFunctionName, TMode>({
    abi: iAccessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof iAccessControlABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, 'grantRole', TMode>({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        typeof iAccessControlABI,
        'renounceRole',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, 'renounceRole', TMode>({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof iAccessControlABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, 'revokeRole', TMode>({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCircuitValidatorABI}__.
 */
export function useICircuitValidatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iCircuitValidatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCircuitValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iCircuitValidatorABI,
    ...config,
  } as UseContractReadConfig<
    typeof iCircuitValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCircuitValidatorABI}__ and `functionName` set to `"getChallengeInputIndex"`.
 */
export function useICircuitValidatorGetChallengeInputIndex<
  TFunctionName extends 'getChallengeInputIndex',
  TSelectData = ReadContractResult<typeof iCircuitValidatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCircuitValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCircuitValidatorABI,
    functionName: 'getChallengeInputIndex',
    ...config,
  } as UseContractReadConfig<
    typeof iCircuitValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCircuitValidatorABI}__ and `functionName` set to `"getCircuitId"`.
 */
export function useICircuitValidatorGetCircuitId<
  TFunctionName extends 'getCircuitId',
  TSelectData = ReadContractResult<typeof iCircuitValidatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCircuitValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCircuitValidatorABI,
    functionName: 'getCircuitId',
    ...config,
  } as UseContractReadConfig<
    typeof iCircuitValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCircuitValidatorABI}__ and `functionName` set to `"verify"`.
 */
export function useICircuitValidatorVerify<
  TFunctionName extends 'verify',
  TSelectData = ReadContractResult<typeof iCircuitValidatorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCircuitValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCircuitValidatorABI,
    functionName: 'verify',
    ...config,
  } as UseContractReadConfig<
    typeof iCircuitValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'approve', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transfer', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc20MetadataABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transferFrom', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate'
        >['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3'
        >['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'aggregate3Value',
        TMode
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'blockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'tryBlockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iWorldIdABI}__.
 */
export function useIWorldIdRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iWorldIdABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iWorldIdABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iWorldIdABI,
    ...config,
  } as UseContractReadConfig<typeof iWorldIdABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iWorldIdABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useIWorldIdVerifyProof<
  TFunctionName extends 'verifyProof',
  TSelectData = ReadContractResult<typeof iWorldIdABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iWorldIdABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iWorldIdABI,
    functionName: 'verifyProof',
    ...config,
  } as UseContractReadConfig<typeof iWorldIdABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__.
 */
export function useIzkpVerifierWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof izkpVerifierABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof izkpVerifierABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof izkpVerifierABI, TFunctionName, TMode>({
    abi: izkpVerifierABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__ and `functionName` set to `"getZKPRequest"`.
 */
export function useIzkpVerifierGetZkpRequest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof izkpVerifierABI,
          'getZKPRequest'
        >['request']['abi'],
        'getZKPRequest',
        TMode
      > & { functionName?: 'getZKPRequest' }
    : UseContractWriteConfig<typeof izkpVerifierABI, 'getZKPRequest', TMode> & {
        abi?: never
        functionName?: 'getZKPRequest'
      } = {} as any,
) {
  return useContractWrite<typeof izkpVerifierABI, 'getZKPRequest', TMode>({
    abi: izkpVerifierABI,
    functionName: 'getZKPRequest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__ and `functionName` set to `"setZKPRequest"`.
 */
export function useIzkpVerifierSetZkpRequest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof izkpVerifierABI,
          'setZKPRequest'
        >['request']['abi'],
        'setZKPRequest',
        TMode
      > & { functionName?: 'setZKPRequest' }
    : UseContractWriteConfig<typeof izkpVerifierABI, 'setZKPRequest', TMode> & {
        abi?: never
        functionName?: 'setZKPRequest'
      } = {} as any,
) {
  return useContractWrite<typeof izkpVerifierABI, 'setZKPRequest', TMode>({
    abi: izkpVerifierABI,
    functionName: 'setZKPRequest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__ and `functionName` set to `"setZKPRequestRaw"`.
 */
export function useIzkpVerifierSetZkpRequestRaw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof izkpVerifierABI,
          'setZKPRequestRaw'
        >['request']['abi'],
        'setZKPRequestRaw',
        TMode
      > & { functionName?: 'setZKPRequestRaw' }
    : UseContractWriteConfig<
        typeof izkpVerifierABI,
        'setZKPRequestRaw',
        TMode
      > & {
        abi?: never
        functionName?: 'setZKPRequestRaw'
      } = {} as any,
) {
  return useContractWrite<typeof izkpVerifierABI, 'setZKPRequestRaw', TMode>({
    abi: izkpVerifierABI,
    functionName: 'setZKPRequestRaw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__ and `functionName` set to `"submitZKPResponse"`.
 */
export function useIzkpVerifierSubmitZkpResponse<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof izkpVerifierABI,
          'submitZKPResponse'
        >['request']['abi'],
        'submitZKPResponse',
        TMode
      > & { functionName?: 'submitZKPResponse' }
    : UseContractWriteConfig<
        typeof izkpVerifierABI,
        'submitZKPResponse',
        TMode
      > & {
        abi?: never
        functionName?: 'submitZKPResponse'
      } = {} as any,
) {
  return useContractWrite<typeof izkpVerifierABI, 'submitZKPResponse', TMode>({
    abi: izkpVerifierABI,
    functionName: 'submitZKPResponse',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__.
 */
export function usePrepareIzkpVerifierWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof izkpVerifierABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: izkpVerifierABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof izkpVerifierABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__ and `functionName` set to `"getZKPRequest"`.
 */
export function usePrepareIzkpVerifierGetZkpRequest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof izkpVerifierABI, 'getZKPRequest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: izkpVerifierABI,
    functionName: 'getZKPRequest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof izkpVerifierABI, 'getZKPRequest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__ and `functionName` set to `"setZKPRequest"`.
 */
export function usePrepareIzkpVerifierSetZkpRequest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof izkpVerifierABI, 'setZKPRequest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: izkpVerifierABI,
    functionName: 'setZKPRequest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof izkpVerifierABI, 'setZKPRequest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__ and `functionName` set to `"setZKPRequestRaw"`.
 */
export function usePrepareIzkpVerifierSetZkpRequestRaw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof izkpVerifierABI, 'setZKPRequestRaw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: izkpVerifierABI,
    functionName: 'setZKPRequestRaw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof izkpVerifierABI,
    'setZKPRequestRaw'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link izkpVerifierABI}__ and `functionName` set to `"submitZKPResponse"`.
 */
export function usePrepareIzkpVerifierSubmitZkpResponse(
  config: Omit<
    UsePrepareContractWriteConfig<typeof izkpVerifierABI, 'submitZKPResponse'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: izkpVerifierABI,
    functionName: 'submitZKPResponse',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof izkpVerifierABI,
    'submitZKPResponse'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"ARBITRATOR_ROLE"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowArbitratorRole<
  TFunctionName extends 'ARBITRATOR_ROLE',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'ARBITRATOR_ROLE',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"KYC_REQUEST_ID"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowKycRequestId<
  TFunctionName extends 'KYC_REQUEST_ID',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'KYC_REQUEST_ID',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"MAX_AMOUNT_NON_VERIFIED"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowMaxAmountNonVerified<
  TFunctionName extends 'MAX_AMOUNT_NON_VERIFIED',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'MAX_AMOUNT_NON_VERIFIED',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"getRoleAdmin"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"getSupportedRequests"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowGetSupportedRequests<
  TFunctionName extends 'getSupportedRequests',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'getSupportedRequests',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"getZKPRequest"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowGetZkpRequest<
  TFunctionName extends 'getZKPRequest',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'getZKPRequest',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"hasRole"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"isKycVerified"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowIsKycVerified<
  TFunctionName extends 'isKycVerified',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'isKycVerified',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"isVerifiedHuman"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowIsVerifiedHuman<
  TFunctionName extends 'isVerifiedHuman',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'isVerifiedHuman',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"nextOrderId"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowNextOrderId<
  TFunctionName extends 'nextOrderId',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'nextOrderId',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"orders"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOrders<
  TFunctionName extends 'orders',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'orders',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"proofs"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowProofs<
  TFunctionName extends 'proofs',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'proofs',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"requestQueries"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRequestQueries<
  TFunctionName extends 'requestQueries',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'requestQueries',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"requestValidators"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRequestValidators<
  TFunctionName extends 'requestValidators',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'requestValidators',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"token"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"userVolume"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowUserVolume<
  TFunctionName extends 'userVolume',
  TSelectData = ReadContractResult<typeof leP2PEscrowABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractRead({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'userVolume',
    ...config,
  } as UseContractReadConfig<typeof leP2PEscrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof leP2PEscrowABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, TFunctionName, TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"arbitrateCompleteOrder"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowArbitrateCompleteOrder<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'arbitrateCompleteOrder'
        >['request']['abi'],
        'arbitrateCompleteOrder',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'arbitrateCompleteOrder'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'arbitrateCompleteOrder',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'arbitrateCompleteOrder'
      } = {} as any,
) {
  return useContractWrite<
    typeof leP2PEscrowABI,
    'arbitrateCompleteOrder',
    TMode
  >({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'arbitrateCompleteOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"cancelOrderArbitrator"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowCancelOrderArbitrator<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'cancelOrderArbitrator'
        >['request']['abi'],
        'cancelOrderArbitrator',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'cancelOrderArbitrator'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'cancelOrderArbitrator',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'cancelOrderArbitrator'
      } = {} as any,
) {
  return useContractWrite<
    typeof leP2PEscrowABI,
    'cancelOrderArbitrator',
    TMode
  >({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'cancelOrderArbitrator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"cancelOrderSeller"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowCancelOrderSeller<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'cancelOrderSeller'
        >['request']['abi'],
        'cancelOrderSeller',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'cancelOrderSeller'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'cancelOrderSeller',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'cancelOrderSeller'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'cancelOrderSeller', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'cancelOrderSeller',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"confirmOrder"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowConfirmOrder<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'confirmOrder'
        >['request']['abi'],
        'confirmOrder',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'confirmOrder'
      }
    : UseContractWriteConfig<typeof leP2PEscrowABI, 'confirmOrder', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'confirmOrder'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'confirmOrder', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'confirmOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"createOrder"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowCreateOrder<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'createOrder'
        >['request']['abi'],
        'createOrder',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'createOrder'
      }
    : UseContractWriteConfig<typeof leP2PEscrowABI, 'createOrder', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createOrder'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'createOrder', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'createOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"grantRole"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowGrantRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof leP2PEscrowABI, 'grantRole', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'grantRole', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"releaseOrderArbitrator"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowReleaseOrderArbitrator<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'releaseOrderArbitrator'
        >['request']['abi'],
        'releaseOrderArbitrator',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'releaseOrderArbitrator'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'releaseOrderArbitrator',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'releaseOrderArbitrator'
      } = {} as any,
) {
  return useContractWrite<
    typeof leP2PEscrowABI,
    'releaseOrderArbitrator',
    TMode
  >({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'releaseOrderArbitrator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"releaseOrderBuyer"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowReleaseOrderBuyer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'releaseOrderBuyer'
        >['request']['abi'],
        'releaseOrderBuyer',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'releaseOrderBuyer'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'releaseOrderBuyer',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'releaseOrderBuyer'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'releaseOrderBuyer', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'releaseOrderBuyer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'renounceOwnership', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"renounceRole"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRenounceRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceRole'
      }
    : UseContractWriteConfig<typeof leP2PEscrowABI, 'renounceRole', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'renounceRole', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"reserveOrder"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowReserveOrder<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'reserveOrder'
        >['request']['abi'],
        'reserveOrder',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'reserveOrder'
      }
    : UseContractWriteConfig<typeof leP2PEscrowABI, 'reserveOrder', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'reserveOrder'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'reserveOrder', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'reserveOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"revokeRole"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRevokeRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof leP2PEscrowABI, 'revokeRole', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'revokeRole', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"setZKPRequest"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowSetZkpRequest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'setZKPRequest'
        >['request']['abi'],
        'setZKPRequest',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setZKPRequest'
      }
    : UseContractWriteConfig<typeof leP2PEscrowABI, 'setZKPRequest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setZKPRequest'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'setZKPRequest', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'setZKPRequest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"setZKPRequestRaw"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowSetZkpRequestRaw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'setZKPRequestRaw'
        >['request']['abi'],
        'setZKPRequestRaw',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setZKPRequestRaw'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'setZKPRequestRaw',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setZKPRequestRaw'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'setZKPRequestRaw', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'setZKPRequestRaw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"submitPayment"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowSubmitPayment<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'submitPayment'
        >['request']['abi'],
        'submitPayment',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'submitPayment'
      }
    : UseContractWriteConfig<typeof leP2PEscrowABI, 'submitPayment', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'submitPayment'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'submitPayment', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'submitPayment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"submitZKPResponse"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowSubmitZkpResponse<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'submitZKPResponse'
        >['request']['abi'],
        'submitZKPResponse',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'submitZKPResponse'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'submitZKPResponse',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'submitZKPResponse'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'submitZKPResponse', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'submitZKPResponse',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'transferOwnership', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"verifyAndRegister"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowVerifyAndRegister<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof leP2PEscrowAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof leP2PEscrowABI,
          'verifyAndRegister'
        >['request']['abi'],
        'verifyAndRegister',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'verifyAndRegister'
      }
    : UseContractWriteConfig<
        typeof leP2PEscrowABI,
        'verifyAndRegister',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'verifyAndRegister'
      } = {} as any,
) {
  return useContractWrite<typeof leP2PEscrowABI, 'verifyAndRegister', TMode>({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'verifyAndRegister',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"arbitrateCompleteOrder"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowArbitrateCompleteOrder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof leP2PEscrowABI,
      'arbitrateCompleteOrder'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'arbitrateCompleteOrder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'arbitrateCompleteOrder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"cancelOrderArbitrator"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowCancelOrderArbitrator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof leP2PEscrowABI,
      'cancelOrderArbitrator'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'cancelOrderArbitrator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'cancelOrderArbitrator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"cancelOrderSeller"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowCancelOrderSeller(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'cancelOrderSeller'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'cancelOrderSeller',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'cancelOrderSeller'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"confirmOrder"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowConfirmOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'confirmOrder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'confirmOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'confirmOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"createOrder"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowCreateOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'createOrder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'createOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'createOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"grantRole"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'grantRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"releaseOrderArbitrator"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowReleaseOrderArbitrator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof leP2PEscrowABI,
      'releaseOrderArbitrator'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'releaseOrderArbitrator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'releaseOrderArbitrator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"releaseOrderBuyer"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowReleaseOrderBuyer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'releaseOrderBuyer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'releaseOrderBuyer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'releaseOrderBuyer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"renounceRole"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'renounceRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"reserveOrder"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowReserveOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'reserveOrder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'reserveOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'reserveOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"revokeRole"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'revokeRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"setZKPRequest"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowSetZkpRequest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'setZKPRequest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'setZKPRequest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'setZKPRequest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"setZKPRequestRaw"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowSetZkpRequestRaw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'setZKPRequestRaw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'setZKPRequestRaw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'setZKPRequestRaw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"submitPayment"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowSubmitPayment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'submitPayment'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'submitPayment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'submitPayment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"submitZKPResponse"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowSubmitZkpResponse(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'submitZKPResponse'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'submitZKPResponse',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'submitZKPResponse'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link leP2PEscrowABI}__ and `functionName` set to `"verifyAndRegister"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function usePrepareLeP2PEscrowVerifyAndRegister(
  config: Omit<
    UsePrepareContractWriteConfig<typeof leP2PEscrowABI, 'verifyAndRegister'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    functionName: 'verifyAndRegister',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof leP2PEscrowABI,
    'verifyAndRegister'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"OrderCancelled"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOrderCancelledEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'OrderCancelled'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'OrderCancelled',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'OrderCancelled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"OrderCompleted"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOrderCompletedEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'OrderCompleted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'OrderCompleted',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'OrderCompleted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"OrderCreated"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOrderCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'OrderCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'OrderCreated',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'OrderCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"OrderPayed"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOrderPayedEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'OrderPayed'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'OrderPayed',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'OrderPayed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"OrderReleased"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOrderReleasedEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'OrderReleased'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'OrderReleased',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'OrderReleased'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"OrderReserved"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOrderReservedEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'OrderReserved'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'OrderReserved',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'OrderReserved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'RoleAdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'RoleGranted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link leP2PEscrowABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0x9B63d91850694D66a7B10F3a0AA2AF74F4AA5631)
 */
export function useLeP2PEscrowRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof leP2PEscrowABI, 'RoleRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof leP2PEscrowAddress } = {} as any,
) {
  return useContractEvent({
    abi: leP2PEscrowABI,
    address: leP2PEscrowAddress[80001],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof leP2PEscrowABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWorldIdABI}__.
 */
export function useMockWorldIdRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockWorldIdABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockWorldIdABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: mockWorldIdABI,
    ...config,
  } as UseContractReadConfig<typeof mockWorldIdABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockWorldIdABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useMockWorldIdVerifyProof<
  TFunctionName extends 'verifyProof',
  TSelectData = ReadContractResult<typeof mockWorldIdABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockWorldIdABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockWorldIdABI,
    functionName: 'verifyProof',
    ...config,
  } as UseContractReadConfig<typeof mockWorldIdABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonABI}__.
 */
export function usePoseidonRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonABI,
    ...config,
  } as UseContractReadConfig<typeof poseidonABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonABI}__ and `functionName` set to `"hash2"`.
 */
export function usePoseidonHash2<
  TFunctionName extends 'hash2',
  TSelectData = ReadContractResult<typeof poseidonABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonABI,
    functionName: 'hash2',
    ...config,
  } as UseContractReadConfig<typeof poseidonABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonABI}__ and `functionName` set to `"hash3"`.
 */
export function usePoseidonHash3<
  TFunctionName extends 'hash3',
  TSelectData = ReadContractResult<typeof poseidonABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonABI,
    functionName: 'hash3',
    ...config,
  } as UseContractReadConfig<typeof poseidonABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit1LABI}__.
 */
export function usePoseidonUnit1LRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonUnit1LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit1LABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit1LABI,
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit1LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit1LABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonUnit1LPoseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonUnit1LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit1LABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit1LABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit1LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit2ABI}__.
 */
export function usePoseidonUnit2Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonUnit2ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit2ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit2ABI,
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit2ABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonUnit2Poseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonUnit2ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit2ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit2ABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit2ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit2LABI}__.
 */
export function usePoseidonUnit2LRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonUnit2LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit2LABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit2LABI,
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit2LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit2LABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonUnit2LPoseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonUnit2LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit2LABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit2LABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit2LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit3ABI}__.
 */
export function usePoseidonUnit3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonUnit3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit3ABI,
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit3ABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonUnit3Poseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonUnit3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit3ABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit3LABI}__.
 */
export function usePoseidonUnit3LRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonUnit3LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit3LABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit3LABI,
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit3LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit3LABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonUnit3LPoseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonUnit3LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit3LABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit3LABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit3LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit4LABI}__.
 */
export function usePoseidonUnit4LRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonUnit4LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit4LABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit4LABI,
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit4LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit4LABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonUnit4LPoseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonUnit4LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit4LABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit4LABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit4LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit5LABI}__.
 */
export function usePoseidonUnit5LRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonUnit5LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit5LABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit5LABI,
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit5LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit5LABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonUnit5LPoseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonUnit5LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit5LABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit5LABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit5LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit6LABI}__.
 */
export function usePoseidonUnit6LRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonUnit6LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit6LABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit6LABI,
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit6LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonUnit6LABI}__ and `functionName` set to `"poseidon"`.
 */
export function usePoseidonUnit6LPoseidon<
  TFunctionName extends 'poseidon',
  TSelectData = ReadContractResult<typeof poseidonUnit6LABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonUnit6LABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonUnit6LABI,
    functionName: 'poseidon',
    ...config,
  } as UseContractReadConfig<
    typeof poseidonUnit6LABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spongePoseidonABI}__.
 */
export function useSpongePoseidonRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof spongePoseidonABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof spongePoseidonABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: spongePoseidonABI,
    ...config,
  } as UseContractReadConfig<
    typeof spongePoseidonABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link spongePoseidonABI}__ and `functionName` set to `"hash"`.
 */
export function useSpongePoseidonHash<
  TFunctionName extends 'hash',
  TSelectData = ReadContractResult<typeof spongePoseidonABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof spongePoseidonABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: spongePoseidonABI,
    functionName: 'hash',
    ...config,
  } as UseContractReadConfig<
    typeof spongePoseidonABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usdcMockABI}__.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof usdcMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractRead({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    ...config,
  } as UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"allowance"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof usdcMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractRead({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof usdcMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractRead({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"decimals"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof usdcMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractRead({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof usdcMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractRead({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof usdcMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractRead({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof usdcMockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractRead({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof usdcMockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usdcMockABI}__.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof usdcMockAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof usdcMockABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof usdcMockABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof usdcMockABI, TFunctionName, TMode>({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof usdcMockAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof usdcMockABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof usdcMockABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof usdcMockABI, 'approve', TMode>({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof usdcMockAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof usdcMockABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      }
    : UseContractWriteConfig<typeof usdcMockABI, 'decreaseAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof usdcMockABI, 'decreaseAllowance', TMode>({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof usdcMockAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof usdcMockABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      }
    : UseContractWriteConfig<typeof usdcMockABI, 'increaseAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof usdcMockABI, 'increaseAllowance', TMode>({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof usdcMockAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof usdcMockABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof usdcMockABI, 'mint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof usdcMockABI, 'mint', TMode>({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"transfer"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof usdcMockAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof usdcMockABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transfer' }
    : UseContractWriteConfig<typeof usdcMockABI, 'transfer', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof usdcMockABI, 'transfer', TMode>({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof usdcMockAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof usdcMockABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof usdcMockABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof usdcMockABI, 'transferFrom', TMode>({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usdcMockABI}__.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function usePrepareUsdcMockWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usdcMockABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    ...config,
  } as UsePrepareContractWriteConfig<typeof usdcMockABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function usePrepareUsdcMockApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usdcMockABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usdcMockABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function usePrepareUsdcMockDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usdcMockABI, 'decreaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usdcMockABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function usePrepareUsdcMockIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usdcMockABI, 'increaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usdcMockABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function usePrepareUsdcMockMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usdcMockABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usdcMockABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"transfer"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function usePrepareUsdcMockTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usdcMockABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usdcMockABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usdcMockABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function usePrepareUsdcMockTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usdcMockABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usdcMockABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usdcMockABI}__.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof usdcMockABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractEvent({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    ...config,
  } as UseContractEventConfig<typeof usdcMockABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usdcMockABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof usdcMockABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractEvent({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof usdcMockABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usdcMockABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Polygon Mumbai Polygon Scan__](https://mumbai.polygonscan.com/address/0xB6070545E83827182446F0B00405f04456e594ca)
 */
export function useUsdcMockTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof usdcMockABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof usdcMockAddress } = {} as any,
) {
  return useContractEvent({
    abi: usdcMockABI,
    address: usdcMockAddress[80001],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof usdcMockABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkpVerifierABI}__.
 */
export function useZkpVerifierRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof zkpVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: zkpVerifierABI,
    ...config,
  } as UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"getSupportedRequests"`.
 */
export function useZkpVerifierGetSupportedRequests<
  TFunctionName extends 'getSupportedRequests',
  TSelectData = ReadContractResult<typeof zkpVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkpVerifierABI,
    functionName: 'getSupportedRequests',
    ...config,
  } as UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"getZKPRequest"`.
 */
export function useZkpVerifierGetZkpRequest<
  TFunctionName extends 'getZKPRequest',
  TSelectData = ReadContractResult<typeof zkpVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkpVerifierABI,
    functionName: 'getZKPRequest',
    ...config,
  } as UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"owner"`.
 */
export function useZkpVerifierOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof zkpVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkpVerifierABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"proofs"`.
 */
export function useZkpVerifierProofs<
  TFunctionName extends 'proofs',
  TSelectData = ReadContractResult<typeof zkpVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkpVerifierABI,
    functionName: 'proofs',
    ...config,
  } as UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"requestQueries"`.
 */
export function useZkpVerifierRequestQueries<
  TFunctionName extends 'requestQueries',
  TSelectData = ReadContractResult<typeof zkpVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkpVerifierABI,
    functionName: 'requestQueries',
    ...config,
  } as UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"requestValidators"`.
 */
export function useZkpVerifierRequestValidators<
  TFunctionName extends 'requestValidators',
  TSelectData = ReadContractResult<typeof zkpVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkpVerifierABI,
    functionName: 'requestValidators',
    ...config,
  } as UseContractReadConfig<typeof zkpVerifierABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__.
 */
export function useZkpVerifierWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkpVerifierABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof zkpVerifierABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof zkpVerifierABI, TFunctionName, TMode>({
    abi: zkpVerifierABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useZkpVerifierRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkpVerifierABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof zkpVerifierABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof zkpVerifierABI, 'renounceOwnership', TMode>({
    abi: zkpVerifierABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"setZKPRequest"`.
 */
export function useZkpVerifierSetZkpRequest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkpVerifierABI,
          'setZKPRequest'
        >['request']['abi'],
        'setZKPRequest',
        TMode
      > & { functionName?: 'setZKPRequest' }
    : UseContractWriteConfig<typeof zkpVerifierABI, 'setZKPRequest', TMode> & {
        abi?: never
        functionName?: 'setZKPRequest'
      } = {} as any,
) {
  return useContractWrite<typeof zkpVerifierABI, 'setZKPRequest', TMode>({
    abi: zkpVerifierABI,
    functionName: 'setZKPRequest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"setZKPRequestRaw"`.
 */
export function useZkpVerifierSetZkpRequestRaw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkpVerifierABI,
          'setZKPRequestRaw'
        >['request']['abi'],
        'setZKPRequestRaw',
        TMode
      > & { functionName?: 'setZKPRequestRaw' }
    : UseContractWriteConfig<
        typeof zkpVerifierABI,
        'setZKPRequestRaw',
        TMode
      > & {
        abi?: never
        functionName?: 'setZKPRequestRaw'
      } = {} as any,
) {
  return useContractWrite<typeof zkpVerifierABI, 'setZKPRequestRaw', TMode>({
    abi: zkpVerifierABI,
    functionName: 'setZKPRequestRaw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"submitZKPResponse"`.
 */
export function useZkpVerifierSubmitZkpResponse<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkpVerifierABI,
          'submitZKPResponse'
        >['request']['abi'],
        'submitZKPResponse',
        TMode
      > & { functionName?: 'submitZKPResponse' }
    : UseContractWriteConfig<
        typeof zkpVerifierABI,
        'submitZKPResponse',
        TMode
      > & {
        abi?: never
        functionName?: 'submitZKPResponse'
      } = {} as any,
) {
  return useContractWrite<typeof zkpVerifierABI, 'submitZKPResponse', TMode>({
    abi: zkpVerifierABI,
    functionName: 'submitZKPResponse',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useZkpVerifierTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkpVerifierABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof zkpVerifierABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof zkpVerifierABI, 'transferOwnership', TMode>({
    abi: zkpVerifierABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__.
 */
export function usePrepareZkpVerifierWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkpVerifierABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkpVerifierABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkpVerifierABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareZkpVerifierRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkpVerifierABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkpVerifierABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zkpVerifierABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"setZKPRequest"`.
 */
export function usePrepareZkpVerifierSetZkpRequest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkpVerifierABI, 'setZKPRequest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkpVerifierABI,
    functionName: 'setZKPRequest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkpVerifierABI, 'setZKPRequest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"setZKPRequestRaw"`.
 */
export function usePrepareZkpVerifierSetZkpRequestRaw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkpVerifierABI, 'setZKPRequestRaw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkpVerifierABI,
    functionName: 'setZKPRequestRaw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkpVerifierABI, 'setZKPRequestRaw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"submitZKPResponse"`.
 */
export function usePrepareZkpVerifierSubmitZkpResponse(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkpVerifierABI, 'submitZKPResponse'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkpVerifierABI,
    functionName: 'submitZKPResponse',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zkpVerifierABI,
    'submitZKPResponse'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkpVerifierABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareZkpVerifierTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkpVerifierABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zkpVerifierABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zkpVerifierABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkpVerifierABI}__.
 */
export function useZkpVerifierEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof zkpVerifierABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkpVerifierABI,
    ...config,
  } as UseContractEventConfig<typeof zkpVerifierABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkpVerifierABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useZkpVerifierOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof zkpVerifierABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkpVerifierABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof zkpVerifierABI, 'OwnershipTransferred'>)
}
