// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class OrderCompleted extends ethereum.Event {
  get params(): OrderCompleted__Params {
    return new OrderCompleted__Params(this);
  }
}

export class OrderCompleted__Params {
  _event: OrderCompleted;

  constructor(event: OrderCompleted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get paymentProof(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fiatToTokenExchangeRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get iban(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class OrderPayed extends ethereum.Event {
  get params(): OrderPayed__Params {
    return new OrderPayed__Params(this);
  }
}

export class OrderPayed__Params {
  _event: OrderPayed;

  constructor(event: OrderPayed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get paymentProof(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OrderReleased extends ethereum.Event {
  get params(): OrderReleased__Params {
    return new OrderReleased__Params(this);
  }
}

export class OrderReleased__Params {
  _event: OrderReleased;

  constructor(event: OrderReleased) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class OrderReserved extends ethereum.Event {
  get params(): OrderReserved__Params {
    return new OrderReserved__Params(this);
  }
}

export class OrderReserved__Params {
  _event: OrderReserved;

  constructor(event: OrderReserved) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LeP2P__getZKPRequestResultValue0Struct extends ethereum.Tuple {
  get schema(): BigInt {
    return this[0].toBigInt();
  }

  get claimPathKey(): BigInt {
    return this[1].toBigInt();
  }

  get operator(): BigInt {
    return this[2].toBigInt();
  }

  get value(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get queryHash(): BigInt {
    return this[4].toBigInt();
  }

  get circuitId(): string {
    return this[5].toString();
  }
}

export class LeP2P__ordersResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: string;
  value4: Address;
  value5: string;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: string,
    value4: Address,
    value5: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }

  getSeller(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getFiatToTokenExchangeRate(): BigInt {
    return this.value2;
  }

  getIban(): string {
    return this.value3;
  }

  getBuyer(): Address {
    return this.value4;
  }

  getPaymentProof(): string {
    return this.value5;
  }
}

export class LeP2P__requestQueriesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }

  getSchema(): BigInt {
    return this.value0;
  }

  getClaimPathKey(): BigInt {
    return this.value1;
  }

  getOperator(): BigInt {
    return this.value2;
  }

  getQueryHash(): BigInt {
    return this.value3;
  }

  getCircuitId(): string {
    return this.value4;
  }
}

export class LeP2P extends ethereum.SmartContract {
  static bind(address: Address): LeP2P {
    return new LeP2P("LeP2P", address);
  }

  ARBITRATOR_ROLE(): Bytes {
    let result = super.call(
      "ARBITRATOR_ROLE",
      "ARBITRATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ARBITRATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ARBITRATOR_ROLE",
      "ARBITRATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  KYC_REQUEST_ID(): BigInt {
    let result = super.call("KYC_REQUEST_ID", "KYC_REQUEST_ID():(uint64)", []);

    return result[0].toBigInt();
  }

  try_KYC_REQUEST_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "KYC_REQUEST_ID",
      "KYC_REQUEST_ID():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_AMOUNT_NON_VERIFIED(): BigInt {
    let result = super.call(
      "MAX_AMOUNT_NON_VERIFIED",
      "MAX_AMOUNT_NON_VERIFIED():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_AMOUNT_NON_VERIFIED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_AMOUNT_NON_VERIFIED",
      "MAX_AMOUNT_NON_VERIFIED():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSupportedRequests(): Array<BigInt> {
    let result = super.call(
      "getSupportedRequests",
      "getSupportedRequests():(uint64[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getSupportedRequests(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getSupportedRequests",
      "getSupportedRequests():(uint64[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getZKPRequest(requestId: BigInt): LeP2P__getZKPRequestResultValue0Struct {
    let result = super.call(
      "getZKPRequest",
      "getZKPRequest(uint64):((uint256,uint256,uint256,uint256[],uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(requestId)]
    );

    return changetype<LeP2P__getZKPRequestResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getZKPRequest(
    requestId: BigInt
  ): ethereum.CallResult<LeP2P__getZKPRequestResultValue0Struct> {
    let result = super.tryCall(
      "getZKPRequest",
      "getZKPRequest(uint64):((uint256,uint256,uint256,uint256[],uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LeP2P__getZKPRequestResultValue0Struct>(value[0].toTuple())
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextOrderId(): BigInt {
    let result = super.call("nextOrderId", "nextOrderId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextOrderId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextOrderId", "nextOrderId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orders(param0: BigInt): LeP2P__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(address,uint256,uint256,string,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LeP2P__ordersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toAddress(),
      result[5].toString()
    );
  }

  try_orders(param0: BigInt): ethereum.CallResult<LeP2P__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(address,uint256,uint256,string,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LeP2P__ordersResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toAddress(),
        value[5].toString()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proofs(param0: Address, param1: BigInt): boolean {
    let result = super.call("proofs", "proofs(address,uint64):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_proofs(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("proofs", "proofs(address,uint64):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestQueries(param0: BigInt): LeP2P__requestQueriesResult {
    let result = super.call(
      "requestQueries",
      "requestQueries(uint64):(uint256,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LeP2P__requestQueriesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString()
    );
  }

  try_requestQueries(
    param0: BigInt
  ): ethereum.CallResult<LeP2P__requestQueriesResult> {
    let result = super.tryCall(
      "requestQueries",
      "requestQueries(uint64):(uint256,uint256,uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LeP2P__requestQueriesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString()
      )
    );
  }

  requestValidators(param0: BigInt): Address {
    let result = super.call(
      "requestValidators",
      "requestValidators(uint64):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_requestValidators(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "requestValidators",
      "requestValidators(uint64):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setZKPRequest(
    requestId: BigInt,
    validator: Address,
    schema: BigInt,
    claimPathKey: BigInt,
    operator: BigInt,
    value: Array<BigInt>
  ): boolean {
    let result = super.call(
      "setZKPRequest",
      "setZKPRequest(uint64,address,uint256,uint256,uint256,uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(validator),
        ethereum.Value.fromUnsignedBigInt(schema),
        ethereum.Value.fromUnsignedBigInt(claimPathKey),
        ethereum.Value.fromUnsignedBigInt(operator),
        ethereum.Value.fromUnsignedBigIntArray(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_setZKPRequest(
    requestId: BigInt,
    validator: Address,
    schema: BigInt,
    claimPathKey: BigInt,
    operator: BigInt,
    value: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setZKPRequest",
      "setZKPRequest(uint64,address,uint256,uint256,uint256,uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(validator),
        ethereum.Value.fromUnsignedBigInt(schema),
        ethereum.Value.fromUnsignedBigInt(claimPathKey),
        ethereum.Value.fromUnsignedBigInt(operator),
        ethereum.Value.fromUnsignedBigIntArray(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setZKPRequestRaw(
    requestId: BigInt,
    validator: Address,
    schema: BigInt,
    claimPathKey: BigInt,
    operator: BigInt,
    value: Array<BigInt>,
    queryHash: BigInt
  ): boolean {
    let result = super.call(
      "setZKPRequestRaw",
      "setZKPRequestRaw(uint64,address,uint256,uint256,uint256,uint256[],uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(validator),
        ethereum.Value.fromUnsignedBigInt(schema),
        ethereum.Value.fromUnsignedBigInt(claimPathKey),
        ethereum.Value.fromUnsignedBigInt(operator),
        ethereum.Value.fromUnsignedBigIntArray(value),
        ethereum.Value.fromUnsignedBigInt(queryHash)
      ]
    );

    return result[0].toBoolean();
  }

  try_setZKPRequestRaw(
    requestId: BigInt,
    validator: Address,
    schema: BigInt,
    claimPathKey: BigInt,
    operator: BigInt,
    value: Array<BigInt>,
    queryHash: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setZKPRequestRaw",
      "setZKPRequestRaw(uint64,address,uint256,uint256,uint256,uint256[],uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromAddress(validator),
        ethereum.Value.fromUnsignedBigInt(schema),
        ethereum.Value.fromUnsignedBigInt(claimPathKey),
        ethereum.Value.fromUnsignedBigInt(operator),
        ethereum.Value.fromUnsignedBigIntArray(value),
        ethereum.Value.fromUnsignedBigInt(queryHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  submitZKPResponse(
    requestId: BigInt,
    inputs: Array<BigInt>,
    a: Array<BigInt>,
    b: Array<Array<BigInt>>,
    c: Array<BigInt>
  ): boolean {
    let result = super.call(
      "submitZKPResponse",
      "submitZKPResponse(uint64,uint256[],uint256[2],uint256[2][2],uint256[2]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromUnsignedBigIntArray(inputs),
        ethereum.Value.fromUnsignedBigIntArray(a),
        ethereum.Value.fromUnsignedBigIntMatrix(b),
        ethereum.Value.fromUnsignedBigIntArray(c)
      ]
    );

    return result[0].toBoolean();
  }

  try_submitZKPResponse(
    requestId: BigInt,
    inputs: Array<BigInt>,
    a: Array<BigInt>,
    b: Array<Array<BigInt>>,
    c: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "submitZKPResponse",
      "submitZKPResponse(uint64,uint256[],uint256[2],uint256[2][2],uint256[2]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requestId),
        ethereum.Value.fromUnsignedBigIntArray(inputs),
        ethereum.Value.fromUnsignedBigIntArray(a),
        ethereum.Value.fromUnsignedBigIntMatrix(b),
        ethereum.Value.fromUnsignedBigIntArray(c)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userVolume(param0: Address): BigInt {
    let result = super.call("userVolume", "userVolume(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userVolume(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userVolume", "userVolume(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get worldId_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get appId(): string {
    return this._call.inputValues[1].value.toString();
  }

  get actionId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get token_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ArbitrateCompleteOrderCall extends ethereum.Call {
  get inputs(): ArbitrateCompleteOrderCall__Inputs {
    return new ArbitrateCompleteOrderCall__Inputs(this);
  }

  get outputs(): ArbitrateCompleteOrderCall__Outputs {
    return new ArbitrateCompleteOrderCall__Outputs(this);
  }
}

export class ArbitrateCompleteOrderCall__Inputs {
  _call: ArbitrateCompleteOrderCall;

  constructor(call: ArbitrateCompleteOrderCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ArbitrateCompleteOrderCall__Outputs {
  _call: ArbitrateCompleteOrderCall;

  constructor(call: ArbitrateCompleteOrderCall) {
    this._call = call;
  }
}

export class CancelOrderArbitratorCall extends ethereum.Call {
  get inputs(): CancelOrderArbitratorCall__Inputs {
    return new CancelOrderArbitratorCall__Inputs(this);
  }

  get outputs(): CancelOrderArbitratorCall__Outputs {
    return new CancelOrderArbitratorCall__Outputs(this);
  }
}

export class CancelOrderArbitratorCall__Inputs {
  _call: CancelOrderArbitratorCall;

  constructor(call: CancelOrderArbitratorCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CancelOrderArbitratorCall__Outputs {
  _call: CancelOrderArbitratorCall;

  constructor(call: CancelOrderArbitratorCall) {
    this._call = call;
  }
}

export class CancelOrderSellerCall extends ethereum.Call {
  get inputs(): CancelOrderSellerCall__Inputs {
    return new CancelOrderSellerCall__Inputs(this);
  }

  get outputs(): CancelOrderSellerCall__Outputs {
    return new CancelOrderSellerCall__Outputs(this);
  }
}

export class CancelOrderSellerCall__Inputs {
  _call: CancelOrderSellerCall;

  constructor(call: CancelOrderSellerCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CancelOrderSellerCall__Outputs {
  _call: CancelOrderSellerCall;

  constructor(call: CancelOrderSellerCall) {
    this._call = call;
  }
}

export class ConfirmOrderCall extends ethereum.Call {
  get inputs(): ConfirmOrderCall__Inputs {
    return new ConfirmOrderCall__Inputs(this);
  }

  get outputs(): ConfirmOrderCall__Outputs {
    return new ConfirmOrderCall__Outputs(this);
  }
}

export class ConfirmOrderCall__Inputs {
  _call: ConfirmOrderCall;

  constructor(call: ConfirmOrderCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConfirmOrderCall__Outputs {
  _call: ConfirmOrderCall;

  constructor(call: ConfirmOrderCall) {
    this._call = call;
  }
}

export class CreateOrderCall extends ethereum.Call {
  get inputs(): CreateOrderCall__Inputs {
    return new CreateOrderCall__Inputs(this);
  }

  get outputs(): CreateOrderCall__Outputs {
    return new CreateOrderCall__Outputs(this);
  }
}

export class CreateOrderCall__Inputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fiatToTokenExchangeRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get iban(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateOrderCall__Outputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class ReleaseOrderArbitratorCall extends ethereum.Call {
  get inputs(): ReleaseOrderArbitratorCall__Inputs {
    return new ReleaseOrderArbitratorCall__Inputs(this);
  }

  get outputs(): ReleaseOrderArbitratorCall__Outputs {
    return new ReleaseOrderArbitratorCall__Outputs(this);
  }
}

export class ReleaseOrderArbitratorCall__Inputs {
  _call: ReleaseOrderArbitratorCall;

  constructor(call: ReleaseOrderArbitratorCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ReleaseOrderArbitratorCall__Outputs {
  _call: ReleaseOrderArbitratorCall;

  constructor(call: ReleaseOrderArbitratorCall) {
    this._call = call;
  }
}

export class ReleaseOrderBuyerCall extends ethereum.Call {
  get inputs(): ReleaseOrderBuyerCall__Inputs {
    return new ReleaseOrderBuyerCall__Inputs(this);
  }

  get outputs(): ReleaseOrderBuyerCall__Outputs {
    return new ReleaseOrderBuyerCall__Outputs(this);
  }
}

export class ReleaseOrderBuyerCall__Inputs {
  _call: ReleaseOrderBuyerCall;

  constructor(call: ReleaseOrderBuyerCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ReleaseOrderBuyerCall__Outputs {
  _call: ReleaseOrderBuyerCall;

  constructor(call: ReleaseOrderBuyerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class ReserveOrderCall extends ethereum.Call {
  get inputs(): ReserveOrderCall__Inputs {
    return new ReserveOrderCall__Inputs(this);
  }

  get outputs(): ReserveOrderCall__Outputs {
    return new ReserveOrderCall__Outputs(this);
  }
}

export class ReserveOrderCall__Inputs {
  _call: ReserveOrderCall;

  constructor(call: ReserveOrderCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReserveOrderCall__Outputs {
  _call: ReserveOrderCall;

  constructor(call: ReserveOrderCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetZKPRequestCall extends ethereum.Call {
  get inputs(): SetZKPRequestCall__Inputs {
    return new SetZKPRequestCall__Inputs(this);
  }

  get outputs(): SetZKPRequestCall__Outputs {
    return new SetZKPRequestCall__Outputs(this);
  }
}

export class SetZKPRequestCall__Inputs {
  _call: SetZKPRequestCall;

  constructor(call: SetZKPRequestCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get validator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get schema(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claimPathKey(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get operator(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class SetZKPRequestCall__Outputs {
  _call: SetZKPRequestCall;

  constructor(call: SetZKPRequestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetZKPRequestRawCall extends ethereum.Call {
  get inputs(): SetZKPRequestRawCall__Inputs {
    return new SetZKPRequestRawCall__Inputs(this);
  }

  get outputs(): SetZKPRequestRawCall__Outputs {
    return new SetZKPRequestRawCall__Outputs(this);
  }
}

export class SetZKPRequestRawCall__Inputs {
  _call: SetZKPRequestRawCall;

  constructor(call: SetZKPRequestRawCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get validator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get schema(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claimPathKey(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get operator(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get queryHash(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SetZKPRequestRawCall__Outputs {
  _call: SetZKPRequestRawCall;

  constructor(call: SetZKPRequestRawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SubmitPaymentCall extends ethereum.Call {
  get inputs(): SubmitPaymentCall__Inputs {
    return new SubmitPaymentCall__Inputs(this);
  }

  get outputs(): SubmitPaymentCall__Outputs {
    return new SubmitPaymentCall__Outputs(this);
  }
}

export class SubmitPaymentCall__Inputs {
  _call: SubmitPaymentCall;

  constructor(call: SubmitPaymentCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ipfsHash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SubmitPaymentCall__Outputs {
  _call: SubmitPaymentCall;

  constructor(call: SubmitPaymentCall) {
    this._call = call;
  }
}

export class SubmitZKPResponseCall extends ethereum.Call {
  get inputs(): SubmitZKPResponseCall__Inputs {
    return new SubmitZKPResponseCall__Inputs(this);
  }

  get outputs(): SubmitZKPResponseCall__Outputs {
    return new SubmitZKPResponseCall__Outputs(this);
  }
}

export class SubmitZKPResponseCall__Inputs {
  _call: SubmitZKPResponseCall;

  constructor(call: SubmitZKPResponseCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get inputs(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get a(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get b(): Array<Array<BigInt>> {
    return this._call.inputValues[3].value.toBigIntMatrix();
  }

  get c(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class SubmitZKPResponseCall__Outputs {
  _call: SubmitZKPResponseCall;

  constructor(call: SubmitZKPResponseCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VerifyAndRegisterCall extends ethereum.Call {
  get inputs(): VerifyAndRegisterCall__Inputs {
    return new VerifyAndRegisterCall__Inputs(this);
  }

  get outputs(): VerifyAndRegisterCall__Outputs {
    return new VerifyAndRegisterCall__Outputs(this);
  }
}

export class VerifyAndRegisterCall__Inputs {
  _call: VerifyAndRegisterCall;

  constructor(call: VerifyAndRegisterCall) {
    this._call = call;
  }

  get signal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get root(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class VerifyAndRegisterCall__Outputs {
  _call: VerifyAndRegisterCall;

  constructor(call: VerifyAndRegisterCall) {
    this._call = call;
  }
}
